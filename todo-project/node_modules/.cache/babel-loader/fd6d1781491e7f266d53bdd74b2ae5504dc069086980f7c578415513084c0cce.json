{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\nfunction useLocalStorage(itemName, initialValue) {\n  _s();\n  // itemName -> nombre del valor del local storage - initialValue -> valor inicial en caso de que no exista\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const [item, setItem] = React.useState(initialValue);\n  React.useEffect(() => {\n    setTimeout(() => {\n      try {\n        const localStorageItem = localStorage.getItem(itemName); // obtiene el valor del local storage con el nombre que le hemos pasado\n        let parsedItem; // variable para guardar el valor del local storage como string en formato json\n\n        if (!localStorageItem) {\n          // comprobamos si existe el valor en el local storage o no \n          // en caso de que no exista, guardamos en el local storage el valor que le hemos pasado como parámetro (initialValue)\n          localStorage.setItem(itemName, JSON.stringify(initialValue));\n          parsedItem = initialValue; // guardamos el valor en parsedItem\n        } else {\n          // en caso de que exista simplemente lo guardamos en parsedItem\n          parsedItem = JSON.parse(localStorageItem);\n        }\n        setItem(parsedItem);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    }, 1000);\n  });\n\n  // creamos un estado con el valor del local storage\n\n  // función para guardar el valor en el local storage y actualizar el estado\n  const saveItem = newItem => {\n    try {\n      //formateamos el valor a string en formato json\n      const stringifiedItem = JSON.stringify(newItem);\n      // guardamos el valor en el local storage\n      localStorage.setItem(itemName, stringifiedItem);\n      // actualizamos el estado\n      setItem(newItem);\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  // devolvemos el valor del estado (item) y la función para guardar en el local storage y actualizar el estado (saveItem)\n  return {\n    item,\n    saveItem,\n    loading,\n    error\n  };\n}\n_s(useLocalStorage, \"sd/jOzXoKWa10AnxNJGXHNbuvYQ=\");\nexport { useLocalStorage };","map":{"version":3,"names":["React","useLocalStorage","itemName","initialValue","error","setError","useState","loading","setLoading","item","setItem","useEffect","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","stringify","parse","saveItem","newItem","stringifiedItem"],"sources":["/Users/aresmiro/curso-react/todo-project/src/todoContext/useLocalStorage.js"],"sourcesContent":["import React from \"react\";\n\n\nfunction useLocalStorage(itemName, initialValue) {\n  // itemName -> nombre del valor del local storage - initialValue -> valor inicial en caso de que no exista\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const [item, setItem] = React.useState(initialValue);\n  React.useEffect(() =>{\n  setTimeout(() =>{\n  try{\n      const localStorageItem = localStorage.getItem(itemName); // obtiene el valor del local storage con el nombre que le hemos pasado\n  let parsedItem; // variable para guardar el valor del local storage como string en formato json\n  \n  if (!localStorageItem) { // comprobamos si existe el valor en el local storage o no \n// en caso de que no exista, guardamos en el local storage el valor que le hemos pasado como parámetro (initialValue)\n    localStorage.setItem(itemName, JSON.stringify(initialValue));\n    parsedItem = initialValue; // guardamos el valor en parsedItem\n  } else {\n    // en caso de que exista simplemente lo guardamos en parsedItem\n    parsedItem = JSON.parse(localStorageItem);\n  }\n  setItem(parsedItem);\n  setLoading(false)\n  \n    }catch(error){\n      setError(error)\n\n    }\n  \n  },1000)\n\n  });\n  \n\n  // creamos un estado con el valor del local storage\n  \n\n  // función para guardar el valor en el local storage y actualizar el estado\n  const saveItem = (newItem) => {\n    try{\n    //formateamos el valor a string en formato json\n    const stringifiedItem = JSON.stringify(newItem);\n    // guardamos el valor en el local storage\n    localStorage.setItem(itemName, stringifiedItem);\n    // actualizamos el estado\n    setItem(newItem);\n    }catch(error){\n      setError(error)\n    }\n  };\n\n  // devolvemos el valor del estado (item) y la función para guardar en el local storage y actualizar el estado (saveItem)\n  return {\n    item,\n    saveItem,\n    loading,\n    error\n  };\n}\n\nexport { useLocalStorage };\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,SAASC,eAAe,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAAA;EAC/C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,KAAK,CAACM,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,KAAK,CAACM,QAAQ,CAACH,YAAY,CAAC;EACpDH,KAAK,CAACW,SAAS,CAAC,MAAK;IACrBC,UAAU,CAAC,MAAK;MAChB,IAAG;QACC,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAACb,QAAQ,CAAC,CAAC,CAAC;QAC7D,IAAIc,UAAU,CAAC,CAAC;;QAEhB,IAAI,CAACH,gBAAgB,EAAE;UAAE;UAC3B;UACIC,YAAY,CAACJ,OAAO,CAACR,QAAQ,EAAEe,IAAI,CAACC,SAAS,CAACf,YAAY,CAAC,CAAC;UAC5Da,UAAU,GAAGb,YAAY,CAAC,CAAC;QAC7B,CAAC,MAAM;UACL;UACAa,UAAU,GAAGC,IAAI,CAACE,KAAK,CAACN,gBAAgB,CAAC;QAC3C;QACAH,OAAO,CAACM,UAAU,CAAC;QACnBR,UAAU,CAAC,KAAK,CAAC;MAEf,CAAC,QAAMJ,KAAK,EAAC;QACXC,QAAQ,CAACD,KAAK,CAAC;MAEjB;IAEF,CAAC,EAAC,IAAI,CAAC;EAEP,CAAC,CAAC;;EAGF;;EAGA;EACA,MAAMgB,QAAQ,GAAIC,OAAO,IAAK;IAC5B,IAAG;MACH;MACA,MAAMC,eAAe,GAAGL,IAAI,CAACC,SAAS,CAACG,OAAO,CAAC;MAC/C;MACAP,YAAY,CAACJ,OAAO,CAACR,QAAQ,EAAEoB,eAAe,CAAC;MAC/C;MACAZ,OAAO,CAACW,OAAO,CAAC;IAChB,CAAC,QAAMjB,KAAK,EAAC;MACXC,QAAQ,CAACD,KAAK,CAAC;IACjB;EACF,CAAC;;EAED;EACA,OAAO;IACLK,IAAI;IACJW,QAAQ;IACRb,OAAO;IACPH;EACF,CAAC;AACH;AAAC,GAxDQH,eAAe;AA0DxB,SAASA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}